/*
 * @blinkmobile/angular-camera: v1.0.0
 * undefined
 *
 * Copyright 2017 BlinkMobile
 * Released under the ISC license
 *
 * 
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t():"function"==typeof define&&define.amd?define(t):t()}(this,function(){"use strict";function e(e,t,n){function r(){var e=o.cameraOptions&&o.cameraOptions.video||{},t={width:{exact:+o.width},height:{exact:+o.height}},n=Object.assign({},e,t);return{audio:!1,video:n}}function a(){return Object.assign({},o.cameraOptions,{targetWidth:o.width,targetHeight:o.height})}function i(){o.cameraOptions=m(),o.camera.defaultConstraints=o.cameraOptions}var o=this,d=!1,m=function(){return o.webRTC?r():a()};o.$onInit=function(){o.videoEl=t.find("video")[0],o.imgEl=t[0].querySelector("[camera-target]"),o.camera=n(o.videoEl),o.onCameraOpen=o.onCameraOpen||function(){},o.onCameraError=o.onCameraError||function(){},o.isCameraOpen=!1,o.webRTC=!!o.camera.close,o.width=o.width||c,o.height=o.height||s,o.thumbWidth=o.thumbWidth||l,o.thumbHeight=o.thumbHeight||u,i(o.cameraOptions),d=!0},o.$onChanges=function(e){if(e){for(var t in e)"cameraOptions"===t?i(e[t].currentValue):o[t]=e[t].currentValue;d&&(i(o.cameraOptions),o.isCameraOpen&&(o.camera.close(),o.openCamera()))}},o.openCamera=function(){return o.camera.open().then(function(){return o.camera.getDevices()}).then(function(){return e.$apply(function(){o.isCameraOpen=o.webRTC,o.error=null,o.onCameraOpen({videoEl:o.videoEl})})}).catch(function(t){e.$apply(function(){o.error="NotAllowedError"===t.name?"You must grant access to your webcam to take photos":null,console.warn("There was an error opening the camera: "+t),o.onCameraError({err:t})})})},o.closeCamera=function(){o.camera.close&&o.camera.close(),o.isCameraOpen=!1},o.takePhoto=function(){return o.isCameraOpen=!1,o.camera.getPicture().then(function(t){e.$apply(function(){o.ngModel.$setViewValue(t),o.closeCamera()})}).catch(function(e){o.error=e.toString(),console.warn("There was an error opening the camera: "+e),o.onCameraError({err:e})})},o.useDevice=function(){o.selectedDevice&&o.camera.useDevice(o.selectedDevice)}}function t(){this.availableDevices=[{deviceId:Camera.Direction.BACK,label:"Rear Camera"},{deviceId:Camera.Direction.FRONT,label:"Front Camera"}],this.defaultConstraints={cameraDirection:Camera.Direction.BACK,quality:50,destinationType:Camera.DestinationType.FILE_URI,encodingType:Camera.EncodingType.PNG,sourceType:Camera.PictureSourceType.CAMERA,correctOrientation:!0},h.set(this,{result:null})}function n(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return n.unshift(null),new(t.bind.apply(t,n))}function r(e){if(!e)throw new TypeError("WebRTCCamera expects a video element during instansiation");this.defaultConstraints={video:!0,audio:!1},this.availableDevices=[],p.set(this,{videoEl:e,stream:null,videoTrack:null,authorised:!1,result:null})}function a(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.unshift(null),new(r.bind.apply(r,t))}function i(){for(var e=!(!window.Camera||!navigator.camera),t=arguments.length,r=Array(t),i=0;i<t;i++)r[i]=arguments[i];return e?n.apply(null,r):a.apply(null,r)}function o(){return function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.apply(i,t)}}var c=640,s=480,l=100,u=100;e.$inject=["$scope","$element","Camera"];var d='<div class="bm-camera-container">\n  <div class="bm-camera-preview-container">\n    <video class="bm-camera-video" autoplay width="{{$ctrl.width}}" height="{{$ctrl.height}}" ng-show="$ctrl.isCameraOpen" width="{{$ctrl.width}}" height="{{$ctrl.height}}"></video>\n    <!-- allows the developer to include their own image manipulation controls -->\n    <div ng-transclude>\n      <!-- fallback if no target and image processing tools provided -->\n      <img ng-src="{{$ctrl.ngModel.$viewValue}}" camera-target width="{{$ctrl.thumbWidth}}" height="{{$ctrl.thumbHeight}}" ng-show="$ctrl.ngModel.$viewValue" class="bm-camera-still-image ng-hide">\n    </div>\n  </div>\n  <div class="bm-camera-selector-container" ng-show="$ctrl.camera.availableDevices.length > 1">\n    <select class="bm-camera-selector" ng-model="$ctrl.selectedDevice" ng-options="device.label for device in $ctrl.camera.availableDevices" ng-change="$ctrl.useDevice()">\n\n    </select>\n  </div>\n  <div ng-if="$ctrl.webRTC">\n    <button class="btn" name="open-camera" ng-click="$ctrl.openCamera()" ng-hide="$ctrl.isCameraOpen">Open Camera</button>\n    <button class="btn ng-hide" name="close-camera" ng-click="$ctrl.closeCamera()" ng-show="$ctrl.isCameraOpen">Close Camera</button>\n    <button class="btn" name="take-photo" ng-click="$ctrl.takePhoto()" ng-show="$ctrl.isCameraOpen">Take Photo</button>\n\n    <div class="bm-field-error" ng-show="$ctrl.error">\n      <p>{{::$ctrl.error}}</p>\n    </div>\n  </div>\n  <div ng-if="!$ctrl.webRTC">\n    <button class="btn" name="open-camera" ng-click="$ctrl.takePhoto()">Take Photo</button>\n  </div>\n</div>\n',m={controller:e,template:d,transclude:!0,require:{ngModel:"ngModel"},bindings:{width:"@?",height:"@?",thumbWidth:"@?",thumbHeight:"@?",cameraOptions:"<?",onCameraError:"&?",onCameraOpen:"&?"}},h=new WeakMap;t.prototype.getDevices=function(){return Promise.resolve(this.availableDevices)},t.prototype.useDevice=function(e){if(!("deviceId"in e))throw new TypeError("Invalid device selected, must be of type MediaDeviceInfo");this.defaultConstraints.cameraDirection=e.deviceId},t.prototype.open=function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.defaultConstraints;return t=Object.assign({},this.defaultConstraints,t),new Promise(function(n,r){var a=function(t){h.get(e).result=t,n(t)};navigator.camera.getPicture(a,r,t)})},t.prototype.getPicture=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.defaultConstraints,t=h.get(this);return t.result?Promise.resolve(t.result):this.open(e).then(function(){var e=t.result;return t.result=null,e})};var v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p=new WeakMap;r.prototype.useDevice=function(e){if(this.close(),!("deviceId"in e))throw new TypeError("Invalid device selected, must be of type MediaDeviceInfo");var t="object"===v(this.defaultConstraints.video)?this.defaultConstraints.video:{};return t.deviceId={exact:e.deviceId},this.defaultConstraints.video=t,this.open()},r.prototype.getDevices=function(){var e=this;return p.get(this).authorised?navigator.mediaDevices&&navigator.mediaDevices.enumerateDevices?navigator.mediaDevices.enumerateDevices().then(function(t){return e.availableDevices=t.filter(function(e){return"videoinput"===e.kind.toLowerCase()}),e.availableDevices}):Promise.reject(new Error("Media Devices API not supported in this browser")):Promise.resolve([])},r.prototype.open=function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.defaultConstraints;return t=Object.assign({},this.defaultConstraints,t),new Promise(function(n,r){getUserMedia(t,function(t,a){if(t)return r(t);var i=a.getVideoTracks(),o=p.get(e);return o.authorised=!0,i.length?(o.videoEl.addEventListener("canplay",n,{once:!0}),o.videoTrack=i[0],o.stream=a,void(o.videoEl.srcObject=a)):(o.stream=null,o.videoTrack=null,r(new Error("Could not get a video track from stream")))})})},r.prototype.getPicture=function(){if(!p.get(this).authorised)return Promise.reject(new DOMException("User has not authorised use of the camera","NotAllowedError"));var e=p.get(this),t=document.createElement("canvas"),n=t.getContext("2d"),r=e.videoEl;return t.width=r.videoWidth,t.height=r.videoHeight,n.drawImage(e.videoEl,0,0),Promise.resolve(t.toDataURL("image/png"))},r.prototype.close=function(){var e=p.get(this).videoTrack;e&&e.stop()},angular.module("bmCamera",[]).service("Camera",o).component("bmCamera",m)});